import React, { FC, useCallback, useEffect, useState } from 'react';
import { useValue } from 'cs2/api';
import { cityInfo, Number2 } from 'cs2/bindings';
import { DraggablePanelProps, PanelProps, Scrollable, Panel, Tooltip } from 'cs2/ui';
import { BuildingDemandData } from '../../bindings';
import { useLocalization } from 'cs2/l10n';
import styles from './Demand.module.scss';

// Declare global 'engine' if needed

interface AlignedParagraphProps {
  left: number;
  right: string;
}

const AlignedParagraph: FC<AlignedParagraphProps> = ({ left, right }) => {
  let color: string;
  if (left < -50) {
    color = 'red';
  } else if (left > 50) {
    color = '#00CC00';
  } else {
    color = 'white'; // default
  }

  const containerStyle: React.CSSProperties = {
    display: 'flex',
    justifyContent: 'space-between',
    textAlign: 'justify',
    marginBottom: '0.1em', // Add some spacing between the <p> tags
  };
  const leftTextStyle: React.CSSProperties = {
    color: color,
    fontSize: '80%',
    width: '20%',
    marginLeft: '10%',
  };
  const rightTextStyle: React.CSSProperties = {
    fontSize: '80%',
    width: '60%',
    marginRight: '10%',
    textAlign: 'right',
  };

  return (
    <p style={containerStyle}>
      <span style={leftTextStyle}>{left}</span>
      <span style={rightTextStyle}>{right}</span>
    </p>
  );
};

interface DemandSection2Props {
  title: string;
  value: number;
  factors: { factor: string; weight: number }[];
}

// Map factor names to display-friendly names and tooltips
const getDisplayName = (
  factor: string,
  translate: (key: string, fallback: string) => string
): { display: string; tooltip: string } => {
  // Helper to append the "influence" explanation to each tooltip
  const appendInfluence = (tooltip: string) =>
    tooltip + " " + translate("InfoLoomTwo.DemandPanel[FactorWeightTooltip]", "The greater the number, the more influence this factor has on demand.");

  const displayNames: { [key: string]: { display: string; tooltip: string } } = {
    StorageLevels: {
      display: translate("InfoLoomTwo.DemandPanel[StorageLevels]", "Storage Levels"),
      tooltip: appendInfluence(translate("InfoLoomTwo.DemandPanel[StorageLevelsTooltip]", "Current storage levels for goods and resources. Low storage increases demand."))
    },
    UneducatedWorkforce: {
      display: translate("InfoLoomTwo.DemandPanel[UneducatedWorkforce]", "Labour Availability"),
      tooltip: appendInfluence(translate("InfoLoomTwo.DemandPanel[UneducatedWorkforceTooltip]", "Availability of uneducated workers for entry-level jobs."))
    },
    EducatedWorkforce: {
      display: translate("InfoLoomTwo.DemandPanel[EducatedWorkforce]", "High Skill Labour Availability"),
      tooltip: appendInfluence(translate("InfoLoomTwo.DemandPanel[EducatedWorkforceTooltip]", "Availability of educated workers for skilled jobs."))
    },
    CompanyWealth: {
      display: translate("InfoLoomTwo.DemandPanel[CompanyWealth]", "Company Wealth"),
      tooltip: appendInfluence(translate("InfoLoomTwo.DemandPanel[CompanyWealthTooltip]", "Overall wealth of companies. Wealthier companies may reduce demand for new businesses."))
    },
    LocalDemand: {
      display: translate("InfoLoomTwo.DemandPanel[LocalDemand]", "Local Demand"),
      tooltip: appendInfluence(translate("InfoLoomTwo.DemandPanel[LocalDemandTooltip]", "Demand generated by local population and businesses."))
    },
    Unemployment: {
      display: translate("InfoLoomTwo.DemandPanel[Unemployment]", "Availability of Jobs"),
      tooltip: appendInfluence(translate("InfoLoomTwo.DemandPanel[UnemploymentTooltip]", "How many jobs are available for citizens. High unemployment increases demand."))
    },
    FreeWorkplaces: {
      display: translate("InfoLoomTwo.DemandPanel[FreeWorkplaces]", "Free Workplaces"),
      tooltip: appendInfluence(translate("InfoLoomTwo.DemandPanel[FreeWorkplacesTooltip]", "Number of available workplaces. More free workplaces can reduce demand for new jobs."))
    },
    Happiness: {
      display: translate("InfoLoomTwo.DemandPanel[Happiness]", "Citizen Happiness"),
      tooltip: appendInfluence(translate("InfoLoomTwo.DemandPanel[HappinessTooltip]", "Overall happiness of citizens. Unhappy citizens increase demand for better housing or jobs."))
    },
    Homelessness: {
      display: translate("InfoLoomTwo.DemandPanel[Homelessness]", "Cost of Living"),
      tooltip: appendInfluence(translate("InfoLoomTwo.DemandPanel[HomelessnessTooltip]", "High homelessness or high cost of living increases demand for affordable housing."))
    },
    TouristDemand: {
      display: translate("InfoLoomTwo.DemandPanel[TouristDemand]", "Tourist Demand"),
      tooltip: appendInfluence(translate("InfoLoomTwo.DemandPanel[TouristDemandTooltip]", "Demand generated by tourists for services, goods, and accommodations."))
    },
    LocalInputs: {
      display: translate("InfoLoomTwo.DemandPanel[LocalInputs]", "Local Inputs"),
      tooltip: appendInfluence(translate("InfoLoomTwo.DemandPanel[LocalInputsTooltip]", "Availability of local input resources for production. Shortages increase demand."))
    },
    Taxes: {
      display: translate("InfoLoomTwo.DemandPanel[Taxes]", "Taxes"),
      tooltip: appendInfluence(translate("InfoLoomTwo.DemandPanel[TaxesTooltip]", "Tax rates for residents and companies. Higher taxes reduce demand."))
    },
    Students: {
      display: translate("InfoLoomTwo.DemandPanel[Students]", "Students"),
      tooltip: appendInfluence(translate("InfoLoomTwo.DemandPanel[StudentsTooltip]", "Number of students in the city. More students can affect workforce and housing demand."))
    },
    EmptyBuildings: {
      display: translate("InfoLoomTwo.DemandPanel[EmptyBuildings]", "Building Occupancy"),
      tooltip: appendInfluence(translate("InfoLoomTwo.DemandPanel[EmptyBuildingsTooltip]", "How many buildings are currently empty and available for new residents or businesses."))
    },
    EmptyZones: {
      display: translate("InfoLoomTwo.DemandPanel[EmptyZones]", "Empty Zones"),
      tooltip: appendInfluence(translate("InfoLoomTwo.DemandPanel[EmptyZonesTooltip]", "Amount of zoned land that is currently empty. More empty zones can reduce demand for new zoning."))
    },
    PoorZoneLocation: {
      display: translate("InfoLoomTwo.DemandPanel[PoorZoneLocation]", "Poor Zone Location"),
      tooltip: appendInfluence(translate("InfoLoomTwo.DemandPanel[PoorZoneLocationTooltip]", "Zones in undesirable locations reduce demand for development."))
    },
    PetrolLocalDemand: {
      display: translate("InfoLoomTwo.DemandPanel[PetrolLocalDemand]", "Gas Station Availability"),
      tooltip: appendInfluence(translate("InfoLoomTwo.DemandPanel[PetrolLocalDemandTooltip]", "Availability of gas stations for local demand."))
    },
    Warehouses: {
      display: translate("InfoLoomTwo.DemandPanel[Warehouses]", "Availability of Warehouses"),
      tooltip: appendInfluence(translate("InfoLoomTwo.DemandPanel[WarehousesTooltip]", "How many warehouses are available for industrial or commercial storage needs."))
    },
  };
  return displayNames[factor] || { display: factor, tooltip: translate("InfoLoomTwo.DemandPanel[FactorWeightTooltip]", "The greater the number, the more influence this factor has on demand.") };
};

const DemandSection2: FC<DemandSection2Props> = ({ title, value, factors }) => {
  const { translate: rawTranslate } = useLocalization();
  // Always return string, never null
  const safeTranslate = (key: string, fallback: string) => {
    const result = rawTranslate(key, fallback);
    return result == null ? fallback : result;
  };
  return (
    <div
      className="infoview-panel-section_RXJ"
      style={{ width: '100%', paddingTop: '3rem', paddingBottom: '3rem' }}
    >
      {/* Title with tooltip */}
      <div className="labels_L7Q row_S2v uppercase_RJI">
        <Tooltip tooltip={safeTranslate(`InfoLoomTwo.DemandPanel[${title.replace(/\s/g, '')}Tooltip]`, `${title} demand factors`)}>
          <div
            className="left_Lgw row_S2v"
            style={{
              fontSize: 'var(--fontSizeM)',
            }}
          >
            {safeTranslate(`InfoLoomTwo.DemandPanel[${title.replace(/\s/g, '')}]`, title)}
          </div>
        </Tooltip>
        {value >= 0 && (
          <div
            className="right_k30 row_S2v"
            style={{
              fontSize: 'var(--fontSizeM)',
            }}
          >
            {Math.round(value * 100)}
          </div>
        )}
      </div>
      <div className="space_uKL" style={{ height: '3rem' }}></div>
      {/* Factors */}
      {factors.map((item, index) => {
        const { display, tooltip } = getDisplayName(item.factor, safeTranslate);
        return (
          <div key={index} className="labels_L7Q row_S2v small_ExK" style={{ marginTop: '1rem' }}>
            <Tooltip tooltip={tooltip}>
              <div
                className="left_Lgw row_S2v"
                style={{
                  fontSize: 'var(--fontSizeS)',
                }}
              >
                {display}
              </div>
            </Tooltip>
            <div className="right_k30 row_S2v" style={{ alignItems: 'center' }}>
              {item.weight < 0 ? (
                <div
                  className="negative_YWY"
                  style={{
                    fontSize: 'var(--fontSizeS)',
                    display: 'inline-block'
                  }}
                >
                  {item.weight}
                </div>
              ) : (
                <div
                  className="positive_zrK"
                  style={{
                    fontSize: 'var(--fontSizeS)',
                    display: 'inline-block'
                  }}
                >
                  {item.weight}
                </div>
              )}
            </div>
          </div>
        );
      })}
    </div>
  );
};

const $DemandFactors: FC<DraggablePanelProps> = ({ onClose, initialPosition }) => {
  const { translate } = useLocalization();
  // Demand values
  const residentialLowDemand = useValue(cityInfo.residentialLowDemand$);
  const residentialMediumDemand = useValue(cityInfo.residentialMediumDemand$);
  const residentialHighDemand = useValue(cityInfo.residentialHighDemand$);
  const commercialDemand = useValue(cityInfo.commercialDemand$);
  const industrialDemand = useValue(cityInfo.industrialDemand$);
  const officeDemand = useValue(cityInfo.officeDemand$);

  // Demand factors
  const residentialLowFactors = useValue(cityInfo.residentialLowFactors$);
  const residentialMediumFactors = useValue(cityInfo.residentialMediumFactors$);
  const residentialHighFactors = useValue(cityInfo.residentialHighFactors$);
  const commercialFactors = useValue(cityInfo.commercialFactors$);
  const industrialFactors = useValue(cityInfo.industrialFactors$);
  const officeFactors = useValue(cityInfo.officeFactors$);

  // Building demand
  const buildingDemandData = useValue(BuildingDemandData);
  const titles = [
    'Residential Low',
    'Residential Medium',
    'Residential High',
    'Commercial',
    'Industrial',
    'Storage',
    'Office',
  ];
  const buildingDemandFactors = titles.map((factor, index) => ({
    factor,
    weight: buildingDemandData[index] ?? 0,
  }));
  return (
    <Panel
      draggable
      onClose={onClose}
      initialPosition={initialPosition}
      className={styles.panel}
      header={
        <div className={styles.header}>
          <span className={styles.headerText}>{translate("InfoLoomTwo.DemandPanel[Title]", "Demand")}</span>
        </div>
      }
    >
      <Scrollable vertical={true} trackVisibility={'scrollable'} smooth={true}>
        <DemandSection2 title="BUILDING DEMAND" value={-1} factors={buildingDemandFactors} />
        <DemandSection2
          title="RESIDENTIAL LOW"
          value={residentialLowDemand}
          factors={residentialLowFactors}
        />
        <DemandSection2
          title="RESIDENTIAL MEDIUM"
          value={residentialMediumDemand}
          factors={residentialMediumFactors}
        />
        <DemandSection2
          title="RESIDENTIAL HIGH"
          value={residentialHighDemand}
          factors={residentialHighFactors}
        />
        <DemandSection2 title="COMMERCIAL" value={commercialDemand} factors={commercialFactors} />
        <DemandSection2 title="INDUSTRIAL" value={industrialDemand} factors={industrialFactors} />
        <DemandSection2 title="OFFICE" value={officeDemand} factors={officeFactors} />
      </Scrollable>
    </Panel>
  );
};

export default $DemandFactors;
